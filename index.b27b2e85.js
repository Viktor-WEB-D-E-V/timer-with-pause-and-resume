const t=t=>{try{const e=localStorage.getItem(t);return null===e?void 0:JSON.parse(e)}catch(t){console.error("Get state error",t.message)}},e=(t,e)=>{try{const i=JSON.stringify(e);localStorage.setItem(t,i)}catch(t){console.error("Get state error",t.message)}},i=t=>{try{localStorage.removeItem(t)}catch(t){console.error("Get state error",t.message)}},s={clockface:document.querySelector(".clockface"),startBtn:document.querySelector(".timer-btn[data-start]"),stopBtn:document.querySelector(".timer-btn[data-stop]"),clearBtn:document.querySelector(".timer-btn[data-clear]")};const a=new class{init(){this.onTick(this.getTimeComponents())}loadStateFromLS(){const e=t("timer-state");e&&(this.active=e.active,this.startTime=e.start,this.deltaTime=e.delta,this.onTick(this.getTimeComponents(this.deltaTime)),this.active&&this.resumeTimerAfterReload())}saveStateToLS(){e("timer-state",{active:this.active,start:this.startTime,delta:this.deltaTime})}resumeTimerAfterReload(){this.startTime=Date.now()-this.deltaTime,this.timerId=setInterval((()=>{const t=Date.now();this.deltaTime=t-this.startTime,this.onTick(this.getTimeComponents(this.deltaTime)),this.saveStateToLS()}),1e3)}start(){this.active||(this.active=!0,this.startTime=Date.now()-this.deltaTime,this.saveStateToLS(),this.timerId=setInterval((()=>{const t=Date.now();this.deltaTime=t-this.startTime;const e=this.getTimeComponents(this.deltaTime);this.onTick(e),this.saveStateToLS()}),1e3))}stop(){clearInterval(this.timerId),this.timerId=null,this.active=!1,this.saveStateToLS(),this.onTick(this.getTimeComponents(this.deltaTime))}clear(){clearInterval(this.timerId),this.timerId=null,this.active=!1,this.startTime=0,this.deltaTime=0,i("timer-state"),this.onTick(this.getTimeComponents())}getTimeComponents(t=0){return{hours:this.pad(Math.floor(t%864e5/36e5)),mins:this.pad(Math.floor(t%36e5/6e4)),secs:this.pad(Math.floor(t%6e4/1e3))}}pad(t){return String(t).padStart(2,"0")}constructor({onTick:t}){this.timerId=null,this.active=!1,this.startTime=0,this.deltaTime=0,this.onTick=t,this.init(),this.loadStateFromLS()}}({onTick:function({hours:t,mins:e,secs:i}){s.clockface.textContent=`Hours: ${t} Minutes: ${e} Seconds: ${i}`}});s.startBtn.addEventListener("click",(()=>{a.start()})),s.stopBtn.addEventListener("click",(()=>{a.stop()})),s.clearBtn.addEventListener("click",(()=>{a.clear()}));
//# sourceMappingURL=index.b27b2e85.js.map
