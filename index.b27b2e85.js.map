{"mappings":"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","sources":["src/js/storage.js","src/script.js"],"sourcesContent":["const load = key => {\n  try {\n    const state = localStorage.getItem(key);\n    return state === null ? undefined : JSON.parse(state);\n  } catch (error) {\n    console.error('Get state error', error.message);\n  }\n};\nconst save = (key, value) => {\n  try {\n    const state = JSON.stringify(value);\n    localStorage.setItem(key, state);\n  } catch (error) {\n    console.error('Get state error', error.message);\n  }\n};\nconst remove = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error('Get state error', error.message);\n  }\n};\n\nexport { load, save, remove };\n","import { load, save, remove } from './js/storage';\n\nconst TIMER_KEY = 'timer-state';\n\nconst refs = {\n  clockface: document.querySelector('.clockface'),\n  startBtn: document.querySelector('.timer-btn[data-start]'),\n  stopBtn: document.querySelector('.timer-btn[data-stop]'),\n  clearBtn: document.querySelector('.timer-btn[data-clear]'),\n};\n\nclass Timer {\n  constructor({ onTick }) {\n    this.timerId = null;\n    this.active = false;\n\n    this.startTime = 0;\n    this.deltaTime = 0;\n\n    this.onTick = onTick;\n\n    this.init();\n    this.loadStateFromLS();\n  }\n  //The method displays a default time\n  init() {\n    this.onTick(this.getTimeComponents());\n  }\n\n  loadStateFromLS() {\n    const savedState = load(TIMER_KEY);\n    if (savedState) {\n      this.active = savedState.active;\n      this.startTime = savedState.start;\n      this.deltaTime = savedState.delta;\n\n      this.onTick(this.getTimeComponents(this.deltaTime));\n\n      if (this.active) {\n        this.resumeTimerAfterReload();\n      }\n    }\n  }\n\n  saveStateToLS() {\n    save(TIMER_KEY, {\n      active: this.active,\n      start: this.startTime,\n      delta: this.deltaTime,\n    });\n  }\n\n  resumeTimerAfterReload() {\n    this.startTime = Date.now() - this.deltaTime;\n    this.timerId = setInterval(() => {\n      const currentTime = Date.now();\n      this.deltaTime = currentTime - this.startTime;\n\n      this.onTick(this.getTimeComponents(this.deltaTime));\n      this.saveStateToLS();\n    }, 1000);\n  }\n\n  start() {\n    //Prevent multiple timer starts\n    if (this.active) return;\n    //Change the state to active\n    this.active = true;\n\n    this.startTime = Date.now() - this.deltaTime;\n    //Save state to localStorage timer start working\n    this.saveStateToLS();\n\n    //Refresh markup every 1 sec\n    this.timerId = setInterval(() => {\n      const currentTime = Date.now();\n\n      this.deltaTime = currentTime - this.startTime;\n      const time = this.getTimeComponents(this.deltaTime);\n\n      this.onTick(time);\n      //Update state after each tick\n      this.saveStateToLS();\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.timerId);\n    this.timerId = null;\n    this.active = false;\n    //Save to stage localStorage after press stop btn\n    this.saveStateToLS();\n    this.onTick(this.getTimeComponents(this.deltaTime));\n  }\n\n  clear() {\n    clearInterval(this.timerId);\n    this.timerId = null;\n    this.active = false;\n    this.startTime = 0;\n    this.deltaTime = 0;\n    //Clear locaStorage;\n    remove(TIMER_KEY);\n    this.onTick(this.getTimeComponents());\n  }\n  // The methods converts time(milliseconds) to other values, such as hours, minutes and seconds\n  getTimeComponents(time = 0) {\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { hours, mins, secs };\n  }\n  //The methods adds 0 to the number if the string has < 2 characters\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new Timer({\n  onTick: updateTimerInterface,\n});\n\nrefs.startBtn.addEventListener('click', () => {\n  timer.start();\n});\n\nrefs.stopBtn.addEventListener('click', () => {\n  timer.stop();\n});\nrefs.clearBtn.addEventListener('click', () => {\n  timer.clear();\n});\n\nfunction updateTimerInterface({ hours, mins, secs }) {\n  refs.clockface.textContent = `Hours: ${hours} Minutes: ${mins} Seconds: ${secs}`;\n}\n"],"names":["$3fff5e8daf4b13a6$export$11e63f7b0f3d9900","key","state","localStorage","getItem","undefined","JSON","parse","error","console","message","$3fff5e8daf4b13a6$export$a1544dad697b423d","value","stringify","setItem","$3fff5e8daf4b13a6$export$cd7f480d6b8286c3","removeItem","$2aac3885343dc6b2$var$refs","clockface","document","querySelector","startBtn","stopBtn","clearBtn","$2aac3885343dc6b2$var$timer","init","this","onTick","getTimeComponents","loadStateFromLS","savedState","active","startTime","start","deltaTime","delta","resumeTimerAfterReload","saveStateToLS","Date","now","timerId","setInterval","currentTime","time","stop","clearInterval","clear","pad","Math","floor","String","padStart","constructor","hours","mins","secs","textContent","addEventListener"],"version":3,"file":"index.b27b2e85.js.map"}